'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _domLib = require('dom-lib');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SIZES = ['lg', 'md', 'sm', 'xs'];
var SHAPES = ['default', 'primary', 'link', 'inverse', 'success', 'warning', 'danger', 'info'];

var ClassNameMixin = {
    propTypes: {
        size: _react2.default.PropTypes.oneOf(SIZES),
        shape: _react2.default.PropTypes.oneOf(SHAPES)
    },
    getClassNames: function getClassNames() {
        var classes = [];
        var _props = this.props;
        var shape = _props.shape;
        var size = _props.size;


        shape && classes.push(this.prefix(shape));
        size && classes.push(this.prefix(size));

        return classes;
    },
    prefix: function prefix(className) {
        var classPrefix = this.props.classPrefix;

        var prefix = classPrefix ? classPrefix + '-' : '';
        return prefix + className;
    },

    hasClass: function hasClass(className) {
        var target = arguments.length <= 1 || arguments[1] === undefined ? (0, _reactDom.findDOMNode)(this) : arguments[1];

        return (0, _domLib.hasClass)(target, className);
    },
    addClass: function addClass(className) {
        var target = arguments.length <= 1 || arguments[1] === undefined ? (0, _reactDom.findDOMNode)(this) : arguments[1];

        return (0, _domLib.addClass)(target, className);
    },
    removeClass: function removeClass(className) {
        var target = arguments.length <= 1 || arguments[1] === undefined ? (0, _reactDom.findDOMNode)(this) : arguments[1];

        return (0, _domLib.removeClass)(target, className);
    },
    toggleClass: function toggleClass(className) {
        var target = arguments.length <= 1 || arguments[1] === undefined ? (0, _reactDom.findDOMNode)(this) : arguments[1];


        var toggle = this.hasClass(className, target) ? 'removeClass' : 'addClass';
        return this[toggle](className, target);
    }
};

exports.default = ClassNameMixin;