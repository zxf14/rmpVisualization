'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _lodash = require('lodash');

var _BaseModal = require('./fixtures/BaseModal');

var _BaseModal2 = _interopRequireDefault(_BaseModal);

var _domLib = require('dom-lib');

var _deprecated = require('./prop-types/deprecated');

var _deprecated2 = _interopRequireDefault(_deprecated);

var _elementType = require('./prop-types/elementType');

var _elementType2 = _interopRequireDefault(_elementType);

var _ClassNameMixin = require('./mixins/ClassNameMixin');

var _ClassNameMixin2 = _interopRequireDefault(_ClassNameMixin);

var _Fade = require('./fixtures/Fade');

var _Fade2 = _interopRequireDefault(_Fade);

var _ModalDialog = require('./ModalDialog');

var _ModalDialog2 = _interopRequireDefault(_ModalDialog);

var _ModalBody = require('./ModalBody');

var _ModalBody2 = _interopRequireDefault(_ModalBody);

var _ModalHeader = require('./ModalHeader');

var _ModalHeader2 = _interopRequireDefault(_ModalHeader);

var _ModalTitle = require('./ModalTitle');

var _ModalTitle2 = _interopRequireDefault(_ModalTitle);

var _ModalFooter = require('./ModalFooter');

var _ModalFooter2 = _interopRequireDefault(_ModalFooter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var TRANSITION_DURATION = 300;
var BACKDROP_TRANSITION_DURATION = 150;

var Modal = _react2.default.createClass({
    displayName: 'Modal',

    mixins: [_ClassNameMixin2.default],
    propTypes: _extends({}, _BaseModal2.default.propTypes, _ModalDialog2.default.propTypes, {

        /**
         * Include a backdrop component. Specify 'static' for a backdrop that doesn't trigger an "onHide" when clicked.
         */
        backdrop: _react2.default.PropTypes.oneOf(['static', true, false]),

        /**
         * Close the modal when escape key is pressed
         */
        keyboard: _react2.default.PropTypes.bool,

        /**
         * Open and close the Modal with a slide and fade animation.
         */
        animation: _react2.default.PropTypes.bool,

        /**
         * A Component type that provides the modal content Markup. This is a useful prop when you want to use your own
         * styles and markup to create a custom modal component.
         */
        dialogComponentClass: _elementType2.default,

        /**
         * @private
         */
        dialogComponent: (0, _deprecated2.default)(_elementType2.default, 'Use `dialogComponentClass`.'),

        /**
         * When `true` The modal will automatically shift focus to itself when it opens, and replace it to the last focused element when it closes.
         * Generally this should never be set to false as it makes the Modal less accessible to assistive technologies, like screen-readers.
         */
        autoFocus: _react2.default.PropTypes.bool,

        /**
         * When `true` The modal will prevent focus from leaving the Modal while open.
         * Consider leaving the default value here, as it is necessary to make the Modal work well with assistive technologies,
         * such as screen readers.
         */
        enforceFocus: _react2.default.PropTypes.bool,

        /**
         * When `true` The modal will show itself.
         */
        show: _react2.default.PropTypes.bool,

        /**
         * When `true` The modal body auto height at window resize.
         */
        autoResizeHeight: _react2.default.PropTypes.bool,

        /**
         * A callback fired when the header closeButton or non-static backdrop is
         * clicked. Required if either are specified.
         */
        onHide: _react2.default.PropTypes.func,

        /**
         * Callback fired before the Modal transitions in
         */
        onEnter: _react2.default.PropTypes.func,

        /**
         * Callback fired as the Modal begins to transition in
         */
        onEntering: _react2.default.PropTypes.func,

        /**
         * Callback fired after the Modal finishes transitioning in
         */
        onEntered: _react2.default.PropTypes.func,

        /**
         * Callback fired right before the Modal transitions out
         */
        onExit: _react2.default.PropTypes.func,

        /**
         * Callback fired as the Modal begins to transition out
         */
        onExiting: _react2.default.PropTypes.func,

        /**
         * Callback fired after the Modal finishes transitioning out
         */
        onExited: _react2.default.PropTypes.func,

        dialogClassName: _react2.default.PropTypes.string

    }),

    childContextTypes: {
        /**
         * ModalHeader prop
         */
        onModalHide: _react2.default.PropTypes.func
    },

    getDefaultProps: function getDefaultProps() {
        return _extends({}, _BaseModal2.default.defaultProps, {
            classPrefix: 'modal',
            animation: true,
            dialogComponentClass: _ModalDialog2.default,
            autoResizeHeight: true
        });
    },
    getInitialState: function getInitialState() {
        return {
            modalStyles: {},
            bodyStyles: {}
        };
    },
    getChildContext: function getChildContext() {
        return {
            onModalHide: this.props.onHide
        };
    },
    componentWillUnmount: function componentWillUnmount() {
        (0, _domLib.off)(window, 'resize', this.handleWindowResize);
    },
    render: function render() {
        var _this = this;

        var _props = this.props;
        var className = _props.className;
        var children = _props.children;
        var dialogClassName = _props.dialogClassName;
        var autoResizeHeight = _props.autoResizeHeight;
        var animation = _props.animation;

        var props = _objectWithoutProperties(_props, ['className', 'children', 'dialogClassName', 'autoResizeHeight', 'animation']);

        var _state = this.state;
        var modalStyles = _state.modalStyles;
        var bodyStyles = _state.bodyStyles;

        var inClass = { in: props.show && !animation };
        var Dialog = props.dialogComponent || props.dialogComponentClass;

        var parentProps = (0, _lodash.pick)(props, Object.keys(_BaseModal2.default.propTypes).concat(['onExit', 'onExiting', 'onEnter', 'onEntered']));
        var items = autoResizeHeight ? _react2.default.Children.map(children, function (child, index) {

            if (child.type.displayName === 'ModalBody') {
                return _react2.default.cloneElement(child, {
                    key: index,
                    style: bodyStyles
                }, child.props.children);
            }

            return child;
        }) : children;

        // the rest are fired in handleHide() and handleShow();
        var modal = _react2.default.createElement(
            Dialog,
            _extends({
                key: 'modal',
                ref: function ref(_ref) {
                    return _this._modal = _ref;
                },
                style: modalStyles,
                className: (0, _classnames2.default)(className, inClass),
                dialogClassName: dialogClassName,
                onClick: props.backdrop === true ? this.handleDialogClick : null
            }, props),
            items
        );

        return _react2.default.createElement(
            _BaseModal2.default,
            _extends({
                show: props.show,
                ref: function ref(_ref2) {
                    _this._wrapper = _ref2 && _ref2.refs.modal;
                    _this._backdrop = _ref2 && _ref2.refs.backdrop;
                },
                onEntering: this.handleShow,
                onExited: this.handleHide,
                backdropClassName: (0, _classnames2.default)(this.prefix('backdrop'), inClass),
                containerClassName: this.prefix('open'),
                transition: animation ? _Fade2.default : undefined,
                dialogTransitionTimeout: TRANSITION_DURATION,
                backdropTransitionTimeout: BACKDROP_TRANSITION_DURATION
            }, parentProps),
            modal
        );
    },
    handleShow: function handleShow() {

        (0, _domLib.on)(window, 'resize', this.handleWindowResize);
        this.setState(this.getStyles());

        if (this.props.onEntering) {
            var _props2;

            (_props2 = this.props).onEntering.apply(_props2, arguments);
        }
    },
    handleHide: function handleHide() {
        (0, _domLib.off)(window, 'resize', this.handleWindowResize);

        if (this.props.onExited) {
            var _props3;

            (_props3 = this.props).onExited.apply(_props3, arguments);
        }
    },
    handleDialogClick: function handleDialogClick(e) {
        if (e.target !== e.currentTarget) {
            return;
        }
        this.props.onHide();
    },
    handleWindowResize: function handleWindowResize() {
        this.setState(this.getStyles());
    },
    getStyles: function getStyles() {

        if (!_domLib.canUseDOM) {
            return {};
        }

        var node = _reactDom2.default.findDOMNode(this._modal);
        var doc = (0, _domLib.ownerDocument)(node);
        var scrollHeight = node.scrollHeight;

        var bodyIsOverflowing = (0, _domLib.isOverflowing)(_reactDom2.default.findDOMNode(this.props.container || doc.body));
        var modalIsOverflowing = scrollHeight > doc.documentElement.clientHeight;
        var styles = {
            modalStyles: {
                paddingRight: bodyIsOverflowing && !modalIsOverflowing ? (0, _domLib.getScrollbarSize)() : void 0,
                paddingLeft: !bodyIsOverflowing && modalIsOverflowing ? (0, _domLib.getScrollbarSize)() : void 0
            }
        };

        if (this.props.autoResizeHeight) {

            //Header height + Footer height + Dialog margin
            var excludeHeight = 200;
            var contentHeight = (0, _domLib.getHeight)(window) - excludeHeight;
            var maxHeight = scrollHeight >= contentHeight ? contentHeight : scrollHeight;

            styles.bodyStyles = {
                maxHeight: maxHeight,
                overflow: 'auto'
            };
        }

        return styles;
    }
});

Modal.Body = _ModalBody2.default;
Modal.Header = _ModalHeader2.default;
Modal.Title = _ModalTitle2.default;
Modal.Footer = _ModalFooter2.default;
Modal.Dialog = _ModalDialog2.default;

exports.default = Modal;