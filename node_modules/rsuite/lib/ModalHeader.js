'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createChainedFunction = require('./utils/createChainedFunction');

var _createChainedFunction2 = _interopRequireDefault(_createChainedFunction);

var _ClassNameMixin = require('./mixins/ClassNameMixin');

var _ClassNameMixin2 = _interopRequireDefault(_ClassNameMixin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ModalHeader = _react2.default.createClass({
    displayName: 'ModalHeader',

    mixins: [_ClassNameMixin2.default],
    contextTypes: {
        onModalHide: _react2.default.PropTypes.func
    },
    propTypes: {
        closeButton: _react2.default.PropTypes.bool,
        onHide: _react2.default.PropTypes.func
    },
    getDefaultProps: function getDefaultProps() {
        return {
            classPrefix: 'modal',
            closeButton: true
        };
    },
    render: function render() {

        var handleHide = (0, _createChainedFunction2.default)(this.context.onModalHide, this.props.onHide);
        var classes = (0, _classnames2.default)(this.prefix('header'), this.props.className);

        var closeButton = _react2.default.createElement(
            'button',
            { type: 'button', className: 'close', 'aria-label': 'Close', onClick: handleHide },
            _react2.default.createElement(
                'span',
                { 'aria-hidden': 'true' },
                'Ã—'
            )
        );

        return _react2.default.createElement(
            'div',
            _extends({}, this.props, { className: classes }),
            this.props.closeButton && closeButton,
            this.props.children
        );
    }
});

exports.default = ModalHeader;