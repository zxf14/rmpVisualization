'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ClassNameMixin = require('./mixins/ClassNameMixin');

var _ClassNameMixin2 = _interopRequireDefault(_ClassNameMixin);

var _ButtonGroup = require('./ButtonGroup');

var _ButtonGroup2 = _interopRequireDefault(_ButtonGroup);

var _DropdownToggle = require('./DropdownToggle');

var _DropdownToggle2 = _interopRequireDefault(_DropdownToggle);

var _DropdownMenu = require('./DropdownMenu');

var _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);

var _DropdownMenuItem = require('./DropdownMenuItem');

var _DropdownMenuItem2 = _interopRequireDefault(_DropdownMenuItem);

var _elementType = require('./prop-types/elementType');

var _elementType2 = _interopRequireDefault(_elementType);

var _RootCloseWrapper = require('./fixtures/RootCloseWrapper');

var _RootCloseWrapper2 = _interopRequireDefault(_RootCloseWrapper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var Dropdown = _react2.default.createClass({
    displayName: 'Dropdown',

    mixins: [_ClassNameMixin2.default],
    propTypes: {
        active: _react2.default.PropTypes.bool,
        disabled: _react2.default.PropTypes.bool,
        block: _react2.default.PropTypes.bool,
        dropup: _react2.default.PropTypes.bool,
        role: _react2.default.PropTypes.string,
        onClose: _react2.default.PropTypes.func,
        onOpen: _react2.default.PropTypes.func,
        onToggle: _react2.default.PropTypes.func,
        onSelect: _react2.default.PropTypes.func,
        componentClass: _elementType2.default,
        /*
         * If 'select' is true , title will be updated after the 'onSelect' trigger .
         */
        select: _react2.default.PropTypes.bool,
        activeKey: _react2.default.PropTypes.any,
        bothEnds: _react2.default.PropTypes.bool,
        menuStyle: _react2.default.PropTypes.object
    },
    getDefaultProps: function getDefaultProps() {
        return {
            componentClass: _ButtonGroup2.default,
            active: false,
            disabled: false,
            block: false
        };
    },

    getInitialState: function getInitialState() {
        return {
            title: null,
            activeKey: this.props.activeKey,
            open: false
        };
    },
    toggle: function toggle(isOpen) {
        var open = isOpen || !this.state.open;
        var handleToggle = open ? this.props.onOpen : this.props.onClose;

        this.setState({
            open: open
        }, function () {
            handleToggle && handleToggle();
        });

        this.props.onToggle && this.props.onToggle();
    },
    handleClick: function handleClick() {

        if (this.props.disabled) {
            return;
        }
        this.toggle();
    },
    handleSelect: function handleSelect(eventKey, props, event) {

        this.props.select && this.setState({
            title: props.children,
            activeKey: props.eventKey
        });

        this.props.onSelect && this.props.onSelect(eventKey, props, event);
    },
    update: function update(props) {
        var _ref = props || this.props;

        var children = _ref.children;
        var select = _ref.select;
        var activeKey = _ref.activeKey;

        var state = {
            activeKey: activeKey
        };

        var title = void 0;
        if (select) {
            _react2.default.Children.map(children, function (item, index) {
                if (activeKey === item.props.eventKey) {
                    title = item.props.children;
                } else if (item.props.active) {
                    title = item.props.children;
                }
            });
            title && (state.title = title);
        }

        this.setState(state);
    },
    componentWillMount: function componentWillMount() {
        this.update();
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.update(nextProps);
    },
    render: function render() {
        var _props = this.props;
        var items = _props.items;
        var title = _props.title;
        var children = _props.children;
        var className = _props.className;
        var activeKey = _props.activeKey;
        var dropup = _props.dropup;
        var bothEnds = _props.bothEnds;
        var menuStyle = _props.menuStyle;
        var Component = _props.componentClass;

        var props = _objectWithoutProperties(_props, ['items', 'title', 'children', 'className', 'activeKey', 'dropup', 'bothEnds', 'menuStyle', 'componentClass']);

        var Toggle = _react2.default.createElement(
            _DropdownToggle2.default,
            _extends({}, props, {
                onClick: this.handleClick
            }),
            this.state.title || title
        );

        var Menu = _react2.default.createElement(
            _DropdownMenu2.default,
            {
                onClose: this.toggle,
                onSelect: this.handleSelect,
                activeKey: this.state.activeKey,
                style: menuStyle,
                ref: 'menu'
            },
            children
        );

        if (this.state.open) {
            Menu = _react2.default.createElement(
                _RootCloseWrapper2.default,
                { onRootClose: this.toggle },
                Menu
            );
        }

        var classes = (0, _classnames2.default)({
            'dropdown': !dropup,
            'dropup': dropup,
            'both-ends': bothEnds,
            'open': this.state.open
        }, className);

        return _react2.default.createElement(
            Component,
            _extends({}, props, {
                className: classes,
                role: 'dropdown'
            }),
            Toggle,
            Menu
        );
    }
});

Dropdown.Item = _DropdownMenuItem2.default;

exports.default = Dropdown;