'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ClassNameMixin = require('./mixins/ClassNameMixin');

var _ClassNameMixin2 = _interopRequireDefault(_ClassNameMixin);

var _elementType = require('./prop-types/elementType');

var _elementType2 = _interopRequireDefault(_elementType);

var _NavbarBrand = require('./NavbarBrand');

var _NavbarBrand2 = _interopRequireDefault(_NavbarBrand);

var _NavbarCollapse = require('./NavbarCollapse');

var _NavbarCollapse2 = _interopRequireDefault(_NavbarCollapse);

var _NavbarHeader = require('./NavbarHeader');

var _NavbarHeader2 = _interopRequireDefault(_NavbarHeader);

var _NavbarToggle = require('./NavbarToggle');

var _NavbarToggle2 = _interopRequireDefault(_NavbarToggle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var Navbar = _react2.default.createClass({
    displayName: 'Navbar',

    mixins: [_ClassNameMixin2.default],
    propTypes: {
        classPrefix: _react2.default.PropTypes.string,
        fixedTop: _react2.default.PropTypes.bool,
        fixedBottom: _react2.default.PropTypes.bool,
        inverse: _react2.default.PropTypes.bool,
        componentClass: _elementType2.default,
        onToggle: _react2.default.PropTypes.func
    },
    childContextTypes: {
        classPrefix: _react2.default.PropTypes.string,
        navbar: _react2.default.PropTypes.bool,
        expanded: _react2.default.PropTypes.bool,
        onToggle: _react2.default.PropTypes.func
    },
    getDefaultProps: function getDefaultProps() {
        return {
            classPrefix: 'navbar',
            componentClass: 'div',
            inverse: false
        };
    },

    getInitialState: function getInitialState() {
        return {
            expanded: false
        };
    },
    getChildContext: function getChildContext() {
        return {
            navbar: true,
            classPrefix: this.props.classPrefix,
            onToggle: this.handleToggle,
            expanded: this.state.expanded
        };
    },
    handleToggle: function handleToggle() {

        var expanded = !this.state.expanded;

        this.setState({
            expanded: expanded
        });
        this.props.onToggle && this.props.onToggle();
    },
    render: function render() {
        var _classNames;

        var _props = this.props;
        var inverse = _props.inverse;
        var fixedTop = _props.fixedTop;
        var fixedBottom = _props.fixedBottom;
        var Component = _props.componentClass;
        var children = _props.children;
        var className = _props.className;

        var props = _objectWithoutProperties(_props, ['inverse', 'fixedTop', 'fixedBottom', 'componentClass', 'children', 'className']);

        var classes = (0, _classnames2.default)(className, (_classNames = {
            'navbar': true
        }, _defineProperty(_classNames, this.prefix('default'), !inverse), _defineProperty(_classNames, this.prefix('inverse'), inverse), _defineProperty(_classNames, this.prefix('fixed-top'), fixedTop), _defineProperty(_classNames, this.prefix('fixed-Bottom'), fixedBottom), _classNames));

        return _react2.default.createElement(
            Component,
            _extends({}, props, { className: classes, role: 'navigation' }),
            children
        );
    }
});

Navbar.Brand = _NavbarBrand2.default;
Navbar.Header = _NavbarHeader2.default;
Navbar.Collapse = _NavbarCollapse2.default;
Navbar.Toggle = _NavbarToggle2.default;

exports.default = Navbar;