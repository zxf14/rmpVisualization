'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var ControlLabel = _react2.default.createClass({
    displayName: 'ControlLabel',

    propTypes: {
        htmlFor: _react2.default.PropTypes.string,
        srOnly: _react2.default.PropTypes.bool
    },
    contextTypes: {
        formGroup: _react2.default.PropTypes.object
    },
    getDefaultProps: function getDefaultProps() {
        return {
            srOnly: false
        };
    },
    render: function render() {
        var formGroup = this.context.formGroup;
        var controlId = formGroup && formGroup.controlId;

        var _props = this.props;
        var _props$htmlFor = _props.htmlFor;
        var htmlFor = _props$htmlFor === undefined ? controlId : _props$htmlFor;
        var srOnly = _props.srOnly;
        var className = _props.className;

        var props = _objectWithoutProperties(_props, ['htmlFor', 'srOnly', 'className']);

        if (htmlFor === null) {
            throw new Error('`controlId` is ignored on `<ControlLabel>` when `htmlFor` is specified.');
        }

        var classes = (0, _classnames2.default)({
            'control-label': true,
            'sr-only': srOnly
        }, className);

        return _react2.default.createElement('label', _extends({}, props, {
            htmlFor: htmlFor,
            className: classes
        }));
    }
});

exports.default = ControlLabel;