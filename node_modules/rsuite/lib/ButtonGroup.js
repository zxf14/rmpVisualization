'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ClassNameMixin = require('./mixins/ClassNameMixin');

var _ClassNameMixin2 = _interopRequireDefault(_ClassNameMixin);

var _createChainedFunction = require('./utils/createChainedFunction');

var _createChainedFunction2 = _interopRequireDefault(_createChainedFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ButtonGroup = _react2.default.createClass({
    displayName: 'ButtonGroup',

    mixins: [_ClassNameMixin2.default],
    propTypes: {
        type: _react2.default.PropTypes.oneOf(['radio', 'checkbox']),
        classPrefix: _react2.default.PropTypes.string,
        vertical: _react2.default.PropTypes.bool,
        justified: _react2.default.PropTypes.bool,
        block: _react2.default.PropTypes.bool,
        onSelect: _react2.default.PropTypes.func,
        onClick: _react2.default.PropTypes.func
    },
    getDefaultProps: function getDefaultProps() {
        return {
            block: false,
            justified: false,
            vertical: false,
            classPrefix: 'btn-group'
        };
    },
    handleClick: function handleClick(index) {
        var _props = this.props;
        var type = _props.type;
        var onSelect = _props.onSelect;

        var activeButton = this.refs['btn_' + index];

        if (type === 'checkbox') {
            activeButton.toggleClass('active');
            onSelect && onSelect(activeButton);
        } else if (type === 'radio') {
            for (var key in this.refs) {
                var toggle = this.refs[key] === activeButton ? 'addClass' : 'removeClass';
                this.refs[key][toggle]('active');
            }
            onSelect && onSelect(activeButton);
        }
    },
    render: function render() {
        var _ref,
            _this = this;

        var _props2 = this.props;
        var children = _props2.children;
        var className = _props2.className;
        var vertical = _props2.vertical;
        var block = _props2.block;
        var justified = _props2.justified;

        var classes = _classnames2.default.apply(undefined, [(_ref = {
            'btn-group': true,
            'btn-block': block
        }, _defineProperty(_ref, this.prefix('vertical'), vertical), _defineProperty(_ref, this.prefix('justified'), justified), _ref)].concat(_toConsumableArray(this.getClassNames()), [className]));

        var items = _react2.default.Children.map(children, function (item, index) {
            return _react2.default.cloneElement(item, {
                key: index,
                ref: 'btn_' + index,
                onClick: (0, _createChainedFunction2.default)(function () {
                    return _this.handleClick(index);
                }, item.props.onClick)
            }, item.props.children);
        });

        return _react2.default.createElement(
            'div',
            _extends({}, this.props, {
                className: classes
            }),
            items
        );
    }
});

exports.default = ButtonGroup;