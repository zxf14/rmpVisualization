'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createChainedFunction = require('./utils/createChainedFunction');

var _createChainedFunction2 = _interopRequireDefault(_createChainedFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var Radio = _react2.default.createClass({
    displayName: 'Radio',

    propTypes: {
        id: _react2.default.PropTypes.string,
        name: _react2.default.PropTypes.string,
        inline: _react2.default.PropTypes.bool,
        title: _react2.default.PropTypes.string,
        disabled: _react2.default.PropTypes.bool,
        checked: _react2.default.PropTypes.bool,
        onClick: _react2.default.PropTypes.func,
        onChange: _react2.default.PropTypes.func,
        value: _react2.default.PropTypes.any
    },
    contextTypes: {
        formGroup: _react2.default.PropTypes.object
    },
    getDefaultProps: function getDefaultProps() {
        return {
            inline: false,
            disabled: false
        };
    },
    getInitialState: function getInitialState() {
        return {
            checked: this.props.checked
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {

        if (nextProps.checked !== this.props.checked) {
            this.setState({
                checked: nextProps.checked
            });
        }
    },
    getFormGroup: function getFormGroup() {
        return this.context.formGroup || {};
    },
    handleChange: function handleChange(event) {

        this.setState({
            checked: event.target.checked
        });
        var value = this.props.value;
        var onChange = this.props.onChange;

        var _getFormGroup = this.getFormGroup();

        var onFormGroupChange = _getFormGroup.onChange;


        onChange && onChange(value);
        onFormGroupChange && onFormGroupChange(value);
    },
    render: function render() {
        var _props = this.props;
        var type = _props.type;
        var inline = _props.inline;
        var title = _props.title;
        var name = _props.name;
        var className = _props.className;
        var children = _props.children;
        var onClick = _props.onClick;
        var onChange = _props.onChange;
        var disabled = _props.disabled;

        var props = _objectWithoutProperties(_props, ['type', 'inline', 'title', 'name', 'className', 'children', 'onClick', 'onChange', 'disabled']);

        var labelClasses = (0, _classnames2.default)({
            'radio-inline': inline
        }, className);

        var radioClasses = (0, _classnames2.default)({
            'radio': true,
            'disabled': disabled
        });

        var input = _react2.default.createElement(
            'span',
            { className: (0, _classnames2.default)({
                    checked: this.state.checked
                }) },
            _react2.default.createElement('input', _extends({}, props, {
                type: 'radio',
                name: name,
                disabled: disabled,
                onChange: this.handleChange
            }))
        );

        return _react2.default.createElement(
            'label',
            { className: labelClasses },
            _react2.default.createElement(
                'div',
                {
                    className: radioClasses,
                    role: 'radio'
                },
                input
            ),
            title || children
        );
    }
});

exports.default = Radio;