'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Collapse = require('./fixtures/Collapse');

var _Collapse2 = _interopRequireDefault(_Collapse);

var _ClassNameMixin = require('./mixins/ClassNameMixin');

var _ClassNameMixin2 = _interopRequireDefault(_ClassNameMixin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var Panel = _react2.default.createClass({
    displayName: 'Panel',

    mixins: [_ClassNameMixin2.default],
    propTypes: {
        collapsible: _react2.default.PropTypes.bool,
        header: _react2.default.PropTypes.node,
        id: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.number]),
        defaultExpanded: _react2.default.PropTypes.bool,
        expanded: _react2.default.PropTypes.bool,
        eventKey: _react2.default.PropTypes.any,
        headerRole: _react2.default.PropTypes.string,
        panelRole: _react2.default.PropTypes.string,
        classPrefix: _react2.default.PropTypes.string,

        //Events
        onSelect: _react2.default.PropTypes.func,
        onEnter: _Collapse2.default.propTypes.onEnter,
        onEntering: _Collapse2.default.propTypes.onEntering,
        onEntered: _Collapse2.default.propTypes.onEntered,
        onExit: _Collapse2.default.propTypes.onExit,
        onExiting: _Collapse2.default.propTypes.onExiting,
        onExited: _Collapse2.default.propTypes.onExited
    },

    getDefaultProps: function getDefaultProps() {
        return {
            defaultExpanded: false,
            shape: 'default',
            classPrefix: 'panel'
        };
    },
    getInitialState: function getInitialState() {
        return {
            expanded: this.props.defaultExpanded
        };
    },
    handleSelect: function handleSelect(e) {
        e.persist();
        e.selected = true;

        if (this.props.onSelect) {
            this.props.onSelect(this.props.eventKey, e);
        } else {
            e.preventDefault();
        }

        if (e.selected) {
            this.handleToggle();
        }
    },
    handleToggle: function handleToggle() {
        this.setState({
            expanded: !this.state.expanded
        });
    },
    isExpanded: function isExpanded() {
        return this.props.expanded !== null ? this.props.expanded : this.state.expanded;
    },
    renderCollapsibleBody: function renderCollapsibleBody(panelRole) {
        var collapseProps = {
            onEnter: this.props.onEnter,
            onEntering: this.props.onEntering,
            onEntered: this.props.onEntered,
            onExit: this.props.onExit,
            onExiting: this.props.onExiting,
            onExited: this.props.onExited,
            in: this.isExpanded()
        };
        var props = {
            className: this.prefix('collapse'),
            id: this.props.id,
            ref: 'panel',
            'aria-hidden': !this.isExpanded()
        };
        if (panelRole) {
            props.role = panelRole;
        }

        return _react2.default.createElement(
            _Collapse2.default,
            collapseProps,
            _react2.default.createElement(
                'div',
                props,
                this.renderBody()
            )
        );
    },
    renderBody: function renderBody() {
        var _this = this;

        var allChildren = this.props.children;
        var bodyElements = [];
        var panelBodyChildren = [];
        var bodyClass = this.prefix('body');

        function getProps() {
            return {
                key: bodyElements.length
            };
        }

        function addPanelChild(child) {
            bodyElements.push((0, _react.cloneElement)(child, getProps()));
        }

        function addPanelBody(children) {
            bodyElements.push(_react2.default.createElement(
                'div',
                _extends({ className: bodyClass }, getProps()),
                children
            ));
        }

        function maybeRenderPanelBody() {
            if (panelBodyChildren.length === 0) {
                return;
            }

            addPanelBody(panelBodyChildren);
            panelBodyChildren = [];
        }

        // Handle edge cases where we should not iterate through children.
        if (!Array.isArray(allChildren) || allChildren.length === 0) {
            if (this.shouldRenderFill(allChildren)) {
                addPanelChild(allChildren);
            } else {
                addPanelBody(allChildren);
            }
        } else {
            allChildren.forEach(function (child) {
                if (_this.shouldRenderFill(child)) {
                    maybeRenderPanelBody();

                    // Separately add the filled element.
                    addPanelChild(child);
                } else {
                    panelBodyChildren.push(child);
                }
            });

            maybeRenderPanelBody();
        }

        return bodyElements;
    },
    shouldRenderFill: function shouldRenderFill(child) {
        return _react2.default.isValidElement(child) && child.props.fill !== null;
    },
    renderHeading: function renderHeading(headerRole) {
        var header = this.props.header;

        if (!header) {
            return null;
        }

        if (!_react2.default.isValidElement(header) || Array.isArray(header)) {
            header = this.props.collapsible ? this.renderCollapsibleTitle(header, headerRole) : header;
        } else {
            var className = (0, _classnames2.default)(this.prefix('title'), header.props.className);

            if (this.props.collapsible) {
                header = (0, _react.cloneElement)(header, {
                    className: className,
                    children: this.renderAnchor(header.props.children, headerRole)
                });
            } else {
                header = (0, _react.cloneElement)(header, { className: className });
            }
        }
        return _react2.default.createElement(
            'div',
            {
                className: this.prefix('heading'),
                onClick: this.handleSelect
            },
            header
        );
    },
    renderAnchor: function renderAnchor(header, headerRole) {
        return _react2.default.createElement(
            'a',
            {
                href: '#' + (this.props.id || ''),
                'aria-controls': this.props.collapsible ? this.props.id : null,
                className: this.isExpanded() ? null : 'collapsed',
                'aria-expanded': this.isExpanded(),
                'aria-selected': this.isExpanded(),
                role: headerRole
            },
            header
        );
    },
    renderCollapsibleTitle: function renderCollapsibleTitle(header, headerRole) {
        return _react2.default.createElement(
            'h4',
            { className: this.prefix('title'), role: 'presentation' },
            this.renderAnchor(header, headerRole)
        );
    },
    render: function render() {
        var _props = this.props;
        var headerRole = _props.headerRole;
        var panelRole = _props.panelRole;
        var className = _props.className;
        var collapsible = _props.collapsible;
        var id = _props.id;

        var props = _objectWithoutProperties(_props, ['headerRole', 'panelRole', 'className', 'collapsible', 'id']);

        var clesses = _classnames2.default.apply(undefined, ['panel', className].concat(_toConsumableArray(this.getClassNames())));

        return _react2.default.createElement(
            'div',
            _extends({}, props, {
                className: clesses,
                id: collapsible ? null : id, onSelect: null
            }),
            this.renderHeading(headerRole),
            collapsible ? this.renderCollapsibleBody(panelRole) : this.renderBody()
        );
    }
});

exports.default = Panel;