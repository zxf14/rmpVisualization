'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _elementType = require('./prop-types/elementType');

var _elementType2 = _interopRequireDefault(_elementType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CARET = _react2.default.createElement(
    'span',
    null,
    ' ',
    _react2.default.createElement('span', { className: 'caret' })
);

var DorpdownToggle = _react2.default.createClass({
    displayName: 'DorpdownToggle',

    propTypes: {
        noCaret: _react2.default.PropTypes.bool,
        open: _react2.default.PropTypes.bool,
        title: _react2.default.PropTypes.string,
        useAnchor: _react2.default.PropTypes.bool
    },
    getDefaultProps: function getDefaultProps() {
        return {
            open: false,
            noCaret: false,
            useAnchor: false
        };
    },
    render: function render() {

        var caret = this.props.noCaret ? null : CARET;
        var Component = this.props.useAnchor ? 'a' : _Button2.default;;

        var classes = _defineProperty({}, 'dropdown-toggle', true);

        return _react2.default.createElement(
            Component,
            _extends({}, this.props, {
                className: (0, _classnames2.default)(classes, this.props.className),
                type: 'button',
                role: 'toggle'
            }),
            this.props.title || this.props.children,
            caret
        );
    }
});

exports.default = DorpdownToggle;