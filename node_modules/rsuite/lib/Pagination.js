'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elementType = require('./prop-types/elementType');

var _elementType2 = _interopRequireDefault(_elementType);

var _ClassNameMixin = require('./mixins/ClassNameMixin');

var _ClassNameMixin2 = _interopRequireDefault(_ClassNameMixin);

var _PaginationButton = require('./PaginationButton');

var _PaginationButton2 = _interopRequireDefault(_PaginationButton);

var _Anchor = require('./Anchor');

var _Anchor2 = _interopRequireDefault(_Anchor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var Pagination = _react2.default.createClass({
    displayName: 'Pagination',

    mixins: [_ClassNameMixin2.default],
    propTypes: {
        activePage: _react2.default.PropTypes.number,
        pages: _react2.default.PropTypes.number,
        maxButtons: _react2.default.PropTypes.number,
        /**
         * When `true`, will display the first and the last button page
         */
        boundaryLinks: _react2.default.PropTypes.bool,
        /**
         * When `true`, will display the default node value ('&hellip;').
         * Otherwise, will display provided node (when specified).
         */
        ellipsis: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.bool, _react2.default.PropTypes.node]),
        /**
         * When `true`, will display the default node value ('&laquo;').
         * Otherwise, will display provided node (when specified).
         */
        first: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.bool, _react2.default.PropTypes.node]),
        /**
         * When `true`, will display the default node value ('&raquo;').
         * Otherwise, will display provided node (when specified).
         */
        last: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.bool, _react2.default.PropTypes.node]),
        /**
         * When `true`, will display the default node value ('&lsaquo;').
         * Otherwise, will display provided node (when specified).
         */
        prev: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.bool, _react2.default.PropTypes.node]),
        /**
         * When `true`, will display the default node value ('&rsaquo;').
         * Otherwise, will display provided node (when specified).
         */
        next: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.bool, _react2.default.PropTypes.node]),
        onSelect: _react2.default.PropTypes.func,
        /**
         * You can use a custom element for the buttons
         */
        buttonComponentClass: _elementType2.default,
        classPrefix: _react2.default.PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
        return {
            activePage: 1,
            pages: 1,
            maxButtons: 0,
            first: false,
            last: false,
            prev: false,
            next: false,
            ellipsis: false,
            boundaryLinks: false,
            classPrefix: 'pagination',
            buttonComponentClass: _Anchor2.default
        };
    },
    renderPageButtons: function renderPageButtons() {

        var pageButtons = [];
        var startPage = void 0,
            endPage = void 0,
            hasHiddenPagesAfter = void 0;
        var _props = this.props;
        var maxButtons = _props.maxButtons;
        var activePage = _props.activePage;
        var pages = _props.pages;
        var ellipsis = _props.ellipsis;
        var boundaryLinks = _props.boundaryLinks;


        if (maxButtons) {
            var hiddenPagesBefore = activePage - parseInt(maxButtons / 2, 10);
            startPage = hiddenPagesBefore > 1 ? hiddenPagesBefore : 1;
            hasHiddenPagesAfter = startPage + maxButtons <= pages;

            if (!hasHiddenPagesAfter) {
                endPage = pages;
                startPage = pages - maxButtons + 1;
                if (startPage < 1) {
                    startPage = 1;
                }
            } else {
                endPage = startPage + maxButtons - 1;
            }
        } else {
            startPage = 1;
            endPage = pages;
        }

        for (var pagenumber = startPage; pagenumber <= endPage; pagenumber++) {
            pageButtons.push(this.renderItem({
                key: pagenumber,
                eventKey: pagenumber,
                active: pagenumber === activePage,
                children: pagenumber
            }));
        }

        if (boundaryLinks && ellipsis && startPage !== 1) {

            pageButtons.unshift(this.renderItem({
                key: 'ellipsisFirst',
                disabled: true,
                children: _react2.default.createElement(
                    'span',
                    { 'aria-label': 'More' },
                    ellipsis === true ? '…' : ellipsis
                )
            }));

            pageButtons.unshift(this.renderItem({
                key: 1,
                eventKey: 1,
                children: 1
            }));
        }

        if (maxButtons && hasHiddenPagesAfter && ellipsis) {
            pageButtons.push(this.renderItem({
                key: 'ellipsis',
                disabled: true,
                children: _react2.default.createElement(
                    'span',
                    { 'aria-label': 'More' },
                    ellipsis === true ? '…' : ellipsis
                )
            }));

            if (boundaryLinks && endPage !== pages) {
                pageButtons.push(this.renderItem({
                    key: pages,
                    eventKey: pages,
                    disabled: false,
                    children: pages
                }));
            }
        }

        return pageButtons;
    },
    renderPrev: function renderPrev() {
        var _props2 = this.props;
        var pages = _props2.pages;
        var activePage = _props2.activePage;
        var prev = _props2.prev;


        if (!this.props.prev) {
            return null;
        }

        return this.renderItem({
            key: 'prev',
            eventKey: activePage - 1,
            disabled: activePage === 1,
            children: _react2.default.createElement(
                'span',
                { 'aria-label': 'Previous' },
                prev === true ? '‹' : prev
            )
        });
    },
    renderNext: function renderNext() {
        var _props3 = this.props;
        var pages = _props3.pages;
        var activePage = _props3.activePage;
        var next = _props3.next;


        if (!this.props.next) {
            return null;
        }

        return this.renderItem({
            key: 'next',
            eventKey: activePage + 1,
            disabled: activePage >= pages,
            children: _react2.default.createElement(
                'span',
                { 'aria-label': 'Next' },
                next === true ? '›' : next
            )
        });
    },
    renderFirst: function renderFirst() {
        var _props4 = this.props;
        var pages = _props4.pages;
        var activePage = _props4.activePage;
        var first = _props4.first;


        if (!first) {
            return null;
        }

        return this.renderItem({
            key: 'first',
            eventKey: 1,
            disabled: activePage === 1,
            children: _react2.default.createElement(
                'span',
                { 'aria-label': 'First' },
                first === true ? '«' : first
            )
        });
    },
    renderLast: function renderLast() {
        var _props5 = this.props;
        var pages = _props5.pages;
        var activePage = _props5.activePage;
        var last = _props5.last;


        if (!last) {
            return null;
        }

        return this.renderItem({
            key: 'last',
            eventKey: pages,
            disabled: activePage >= pages,
            children: _react2.default.createElement(
                'span',
                { 'aria-label': 'Last' },
                last === true ? '»' : last
            )
        });
    },
    renderItem: function renderItem(props) {
        var children = props.children;

        var itemProps = _objectWithoutProperties(props, ['children']);

        if (!itemProps.disabled) {
            itemProps.onSelect = this.props.onSelect;
        }

        return _react2.default.createElement(
            _PaginationButton2.default,
            _extends({}, itemProps, {
                componentClass: this.props.buttonComponentClass
            }),
            children
        );
    },
    render: function render() {

        var clesses = _classnames2.default.apply(undefined, [{
            'pagination': true
        }].concat(_toConsumableArray(this.getClassNames()), [this.props.className]));

        return _react2.default.createElement(
            'ul',
            _extends({}, this.props, {
                className: clesses
            }),
            this.renderFirst(),
            this.renderPrev(),
            this.renderPageButtons(),
            this.renderNext(),
            this.renderLast()
        );
    }
});

exports.default = Pagination;