'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _domLib = require('dom-lib');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Transition = require('./Transition');

var _Transition2 = _interopRequireDefault(_Transition);

var _createChainedFunction = require('../utils/createChainedFunction');

var _createChainedFunction2 = _interopRequireDefault(_createChainedFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var capitalize = function capitalize(str) {
    return str[0].toUpperCase() + str.substr(1);
};

// reading a dimension prop will cause the browser to recalculate,
// which will let our animations work
var triggerBrowserReflow = function triggerBrowserReflow(node) {
    return node.offsetHeight;
};

var MARGINS = {
    height: ['marginTop', 'marginBottom'],
    width: ['marginLeft', 'marginRight']
};

function getDimensionValue(dimension, elem) {
    var value = elem['offset' + capitalize(dimension)];
    var margins = MARGINS[dimension];

    return value + parseInt((0, _domLib.getStyle)(elem, margins[0]), 10) + parseInt((0, _domLib.getStyle)(elem, margins[1]), 10);
}

var Collapse = function (_React$Component) {
    _inherits(Collapse, _React$Component);

    function Collapse(props, context) {
        _classCallCheck(this, Collapse);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Collapse).call(this, props, context));

        _this.onEnterListener = _this.handleEnter.bind(_this);
        _this.onEnteringListener = _this.handleEntering.bind(_this);
        _this.onEnteredListener = _this.handleEntered.bind(_this);
        _this.onExitListener = _this.handleExit.bind(_this);
        _this.onExitingListener = _this.handleExiting.bind(_this);
        return _this;
    }

    _createClass(Collapse, [{
        key: 'render',
        value: function render() {
            var enter = (0, _createChainedFunction2.default)(this.onEnterListener, this.props.onEnter);
            var entering = (0, _createChainedFunction2.default)(this.onEnteringListener, this.props.onEntering);
            var entered = (0, _createChainedFunction2.default)(this.onEnteredListener, this.props.onEntered);
            var exit = (0, _createChainedFunction2.default)(this.onExitListener, this.props.onExit);
            var exiting = (0, _createChainedFunction2.default)(this.onExitingListener, this.props.onExiting);

            return _react2.default.createElement(
                _Transition2.default,
                _extends({
                    ref: 'transition'
                }, this.props, {
                    'aria-expanded': this.props.role ? this.props.in : null,
                    className: (0, _classnames2.default)(this.props.className, { width: this._dimension() === 'width' }),
                    exitedClassName: 'collapse',
                    exitingClassName: 'collapsing',
                    enteredClassName: 'collapse in',
                    enteringClassName: 'collapsing',
                    onEnter: enter,
                    onEntering: entering,
                    onEntered: entered,
                    onExit: exit,
                    onExiting: exiting,
                    onExited: this.props.onExited
                }),
                this.props.children
            );
        }

        /* -- Expanding -- */

    }, {
        key: 'handleEnter',
        value: function handleEnter(elem) {
            var dimension = this._dimension();
            elem.style[dimension] = '0';
        }
    }, {
        key: 'handleEntering',
        value: function handleEntering(elem) {
            var dimension = this._dimension();

            elem.style[dimension] = this._getScrollDimensionValue(elem, dimension);
        }
    }, {
        key: 'handleEntered',
        value: function handleEntered(elem) {
            var dimension = this._dimension();
            elem.style[dimension] = null;
        }

        /* -- Collapsing -- */

    }, {
        key: 'handleExit',
        value: function handleExit(elem) {
            var dimension = this._dimension();

            elem.style[dimension] = this.props.getDimensionValue(dimension, elem) + 'px';
        }
    }, {
        key: 'handleExiting',
        value: function handleExiting(elem) {
            var dimension = this._dimension();

            triggerBrowserReflow(elem);
            elem.style[dimension] = '0';
        }
    }, {
        key: '_dimension',
        value: function _dimension() {
            return typeof this.props.dimension === 'function' ? this.props.dimension() : this.props.dimension;
        }

        // for testing

    }, {
        key: '_getTransitionInstance',
        value: function _getTransitionInstance() {
            return this.refs.transition;
        }
    }, {
        key: '_getScrollDimensionValue',
        value: function _getScrollDimensionValue(elem, dimension) {
            return elem['scroll' + capitalize(dimension)] + 'px';
        }
    }]);

    return Collapse;
}(_react2.default.Component);

// Explicitly copied from Transition for doc generation.
// TODO: Remove duplication once #977 is resolved.

Collapse.propTypes = {
    /**
     * Show the component; triggers the expand or collapse animation
     */
    in: _react2.default.PropTypes.bool,

    /**
     * Unmount the component (remove it from the DOM) when it is collapsed
     */
    unmountOnExit: _react2.default.PropTypes.bool,

    /**
     * Run the expand animation when the component mounts, if it is initially
     * shown
     */
    transitionAppear: _react2.default.PropTypes.bool,

    /**
     * Duration of the collapse animation in milliseconds, to ensure that
     * finishing callbacks are fired even if the original browser transition end
     * events are canceled
     */
    timeout: _react2.default.PropTypes.number,

    /**
     * Callback fired before the component expands
     */
    onEnter: _react2.default.PropTypes.func,
    /**
     * Callback fired after the component starts to expand
     */
    onEntering: _react2.default.PropTypes.func,
    /**
     * Callback fired after the component has expanded
     */
    onEntered: _react2.default.PropTypes.func,
    /**
     * Callback fired before the component collapses
     */
    onExit: _react2.default.PropTypes.func,
    /**
     * Callback fired after the component starts to collapse
     */
    onExiting: _react2.default.PropTypes.func,
    /**
     * Callback fired after the component has collapsed
     */
    onExited: _react2.default.PropTypes.func,

    /**
     * The dimension used when collapsing, or a function that returns the
     * dimension
     *
     * _Note: Bootstrap only partially supports 'width'!
     * You will need to supply your own CSS animation for the `.width` CSS class._
     */
    dimension: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.oneOf(['height', 'width']), _react2.default.PropTypes.func]),

    /**
     * Function that returns the height or width of the animating DOM node
     *
     * Allows for providing some custom logic for how much the Collapse component
     * should animate in its specified dimension. Called with the current
     * dimension prop value and the DOM node.
     */
    getDimensionValue: _react2.default.PropTypes.func,

    /**
     * ARIA role of collapsible element
     */
    role: _react2.default.PropTypes.string
};

Collapse.defaultProps = {
    in: false,
    timeout: 300,
    unmountOnExit: false,
    transitionAppear: false,
    dimension: 'height',
    getDimensionValue: getDimensionValue
};

exports.default = Collapse;