'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _domLib = require('dom-lib');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isLeftClickEvent(event) {
    return event.button === 0;
} /**
   * modified version of:
   * https://github.com/react-bootstrap/react-overlays/blob/f1528af806236627df49e0f661aec7cb48980863/src/RootCloseWrapper.js
   */


function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}

var counter = 0;

function getSuppressRootClose() {
    var id = '__click_was_inside_' + counter++;
    return {
        id: id,
        suppressRootClose: function suppressRootClose(event) {
            // Tag the native event to prevent the root close logic on document click.
            // This seems safer than using event.nativeEvent.stopImmediatePropagation(),
            // which is only supported in IE >= 9.
            event.nativeEvent[id] = true;
        }
    };
}

var RootCloseWrapper = _react2.default.createClass({
    displayName: 'RootCloseWrapper',

    propTypes: {
        onRootClose: _react2.default.PropTypes.func.isRequired
    },
    componentWillMount: function componentWillMount() {
        var _getSuppressRootClose = getSuppressRootClose();

        var id = _getSuppressRootClose.id;
        var suppressRootClose = _getSuppressRootClose.suppressRootClose;

        this._suppressRootId = id;
        this._suppressRootCloseHandler = suppressRootClose;
    },
    componentDidMount: function componentDidMount() {
        this.bindRootCloseHandlers();
    },
    componentWillUnmount: function componentWillUnmount() {
        this.unbindRootCloseHandlers();
    },
    bindRootCloseHandlers: function bindRootCloseHandlers() {
        var doc = window.document;
        this._onDocumentClickListener = (0, _domLib.on)(doc, 'click', this.handleDocumentClick);
        this._onDocumentKeyupListener = (0, _domLib.on)(doc, 'keyup', this.handleDocumentKeyUp);
    },
    handleDocumentClick: function handleDocumentClick(event) {
        if (event[this._suppressRootId]) {
            return;
        }
        if (isModifiedEvent(event) || !isLeftClickEvent(event)) {
            return;
        }
        this.props.onRootClose();
    },
    handleDocumentKeyUp: function handleDocumentKeyUp(event) {
        if (event.keyCode === 27) {
            this.props.onRootClose();
        }
    },
    unbindRootCloseHandlers: function unbindRootCloseHandlers() {
        if (this._onDocumentClickListener) {
            this._onDocumentClickListener.off();
        }

        if (this._onDocumentKeyupListener) {
            this._onDocumentKeyupListener.off();
        }
    },
    getWrappedDOMNode: function getWrappedDOMNode() {
        return _reactDom2.default.findDOMNode(this);
    },
    render: function render() {
        var children = this.props.children;

        var child = _react2.default.Children.only(children);

        return _react2.default.cloneElement(child, {
            onClick: this._suppressRootCloseHandler || child.props.onClick
        });
    }
});

exports.default = RootCloseWrapper;