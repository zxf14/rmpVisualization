'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elementType = require('./prop-types/elementType');

var _elementType2 = _interopRequireDefault(_elementType);

var _ClassNameMixin = require('./mixins/ClassNameMixin');

var _ClassNameMixin2 = _interopRequireDefault(_ClassNameMixin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var FormControl = _react2.default.createClass({
    displayName: 'FormControl',

    mixins: [_ClassNameMixin2.default],
    propTypes: {
        componentClass: _elementType2.default,
        type: _react2.default.PropTypes.string,
        id: _react2.default.PropTypes.string
    },
    contextTypes: {
        formGroup: _react2.default.PropTypes.object
    },

    getFormGroup: function getFormGroup() {
        return this.context.formGroup || {};
    },
    getDefaultProps: function getDefaultProps() {
        return {
            componentClass: 'input'
        };
    },
    handleChange: function handleChange(event) {

        var value = event.target.value;
        var onChange = this.props.onChange;

        var _getFormGroup = this.getFormGroup();

        var onFormGroupChange = _getFormGroup.onChange;


        onChange && onChange(value);
        onFormGroupChange && onFormGroupChange(value);
    },
    handleBlur: function handleBlur(event) {
        var onBlur = this.props.onBlur;

        var _getFormGroup2 = this.getFormGroup();

        var onFormGroupBlur = _getFormGroup2.onBlur;

        onBlur && onBlur(event);
        onFormGroupBlur && onFormGroupBlur(event);
    },
    getValue: function getValue() {
        var _getFormGroup3 = this.getFormGroup();

        var value = _getFormGroup3.value;

        return value || this.props.value;
    },
    render: function render() {
        var _getFormGroup4 = this.getFormGroup();

        var controlId = _getFormGroup4.controlId;
        var _props = this.props;
        var Component = _props.componentClass;
        var type = _props.type;
        var _props$id = _props.id;
        var id = _props$id === undefined ? controlId : _props$id;
        var _props$value = _props.value;
        var value = _props$value === undefined ? this.getValue() : _props$value;
        var className = _props.className;

        var props = _objectWithoutProperties(_props, ['componentClass', 'type', 'id', 'value', 'className']);

        var classes = (0, _classnames2.default)({
            // input[type="file"] should not have .form-control.
            'form-control': type !== 'file'
        }, className);

        return _react2.default.createElement(Component, _extends({}, props, {
            type: type,
            id: id,
            value: value,
            className: classes,
            onBlur: this.handleBlur,
            onChange: this.handleChange
        }));
    }
});

exports.default = FormControl;