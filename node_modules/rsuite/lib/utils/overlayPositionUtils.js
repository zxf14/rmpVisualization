'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _domLib = require('dom-lib');

var utils = {
    getContainerDimensions: function getContainerDimensions(containerNode) {
        var width = void 0,
            height = void 0,
            scroll = void 0;
        if (containerNode.tagName === 'BODY') {
            width = window.innerWidth;
            height = window.innerHeight;
            scroll = (0, _domLib.scrollTop)((0, _domLib.ownerDocument)(containerNode).documentElement) || (0, _domLib.scrollTop)(containerNode);
        } else {
            var _getOffset = (0, _domLib.getOffset)(containerNode);

            width = _getOffset.width;
            height = _getOffset.height;

            scroll = (0, _domLib.scrollTop)(containerNode);
        }
        return { width: width, height: height, scroll: scroll };
    },
    getPosition: function getPosition(target, container) {
        var offset = container.tagName === 'BODY' ? (0, _domLib.getOffset)(target) : (0, _domLib.getPosition)(target, container);
        return offset;
    },
    calcOverlayPosition: function calcOverlayPosition(placement, overlayNode, target, container, padding) {

        var childOffset = utils.getPosition(target, container);

        var _getOffset2 = (0, _domLib.getOffset)(overlayNode);

        var overlayHeight = _getOffset2.height;
        var overlayWidth = _getOffset2.width;


        var positionLeft = void 0,
            positionTop = void 0,
            arrowOffsetLeft = void 0,
            arrowOffsetTop = void 0;

        if (placement === 'left' || placement === 'right') {
            positionTop = childOffset.top + (childOffset.height - overlayHeight) / 2;

            if (placement === 'left') {
                positionLeft = childOffset.left - overlayWidth;
            } else {
                positionLeft = childOffset.left + childOffset.width;
            }

            var topDelta = getTopDelta(positionTop, overlayHeight, container, padding);

            positionTop += topDelta;
            arrowOffsetTop = 50 * (1 - 2 * topDelta / overlayHeight) + '%';
            arrowOffsetLeft = void 0;
        } else if (placement === 'top' || placement === 'bottom') {
            positionLeft = childOffset.left + (childOffset.width - overlayWidth) / 2;

            if (placement === 'top') {
                positionTop = childOffset.top - overlayHeight;
            } else {
                positionTop = childOffset.top + childOffset.height;
            }

            var leftDelta = getLeftDelta(positionLeft, overlayWidth, container, padding);
            positionLeft += leftDelta;
            arrowOffsetLeft = 50 * (1 - 2 * leftDelta / overlayWidth) + '%';
            arrowOffsetTop = void 0;
        } else {
            throw new Error('calcOverlayPosition(): No such placement of "' + placement + '" found.');
        }

        return { positionLeft: positionLeft, positionTop: positionTop, arrowOffsetLeft: arrowOffsetLeft, arrowOffsetTop: arrowOffsetTop };
    }
};

function getTopDelta(top, overlayHeight, container, padding) {
    var containerDimensions = utils.getContainerDimensions(container);
    var containerScroll = containerDimensions.scroll;
    var containerHeight = containerDimensions.height;

    var topEdgeOffset = top - padding - containerScroll;
    var bottomEdgeOffset = top + padding - containerScroll + overlayHeight;

    if (topEdgeOffset < 0) {
        return -topEdgeOffset;
    } else if (bottomEdgeOffset > containerHeight) {
        return containerHeight - bottomEdgeOffset;
    } else {
        return 0;
    }
}

function getLeftDelta(left, overlayWidth, container, padding) {
    var containerDimensions = utils.getContainerDimensions(container);
    var containerWidth = containerDimensions.width;

    var leftEdgeOffset = left - padding;
    var rightEdgeOffset = left + padding + overlayWidth;

    if (leftEdgeOffset < 0) {
        return -leftEdgeOffset;
    } else if (rightEdgeOffset > containerWidth) {
        return containerWidth - rightEdgeOffset;
    } else {
        return 0;
    }
}

exports.default = utils;