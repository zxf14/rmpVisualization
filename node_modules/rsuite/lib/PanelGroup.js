'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var PanelGroup = _react2.default.createClass({
    displayName: 'PanelGroup',


    propTypes: {
        accordion: _react2.default.PropTypes.bool,
        activeKey: _react2.default.PropTypes.any,
        className: _react2.default.PropTypes.string,
        children: _react2.default.PropTypes.node,
        defaultActiveKey: _react2.default.PropTypes.any,
        classPrefix: _react2.default.PropTypes.string,
        onSelect: _react2.default.PropTypes.func
    },
    getDefaultProps: function getDefaultProps() {
        return {
            classPrefix: 'panel-group',
            accordion: false
        };
    },
    getInitialState: function getInitialState() {
        return {
            activeKey: this.props.defaultActiveKey
        };
    },
    renderPanel: function renderPanel(child, index) {

        if (!_react2.default.isValidElement(child)) {
            return child;
        }

        var activeKey = this.props.activeKey ? this.props.activeKey : this.state.activeKey;
        var props = {
            bsStyle: child.props.bsStyle || this.props.bsStyle,
            key: child.key ? child.key : index,
            ref: child.ref
        };

        if (this.props.accordion) {
            props.headerRole = 'tab';
            props.panelRole = 'tabpanel';
            props.collapsible = true;
            props.expanded = child.props.eventKey === activeKey;
            props.onSelect = this.handleSelect;
        }

        return (0, _react.cloneElement)(child, props);
    },
    shouldComponentUpdate: function shouldComponentUpdate() {
        // Defer any updates to this component during the `onSelect` handler.
        return !this._isChanging;
    },
    handleSelect: function handleSelect(key, e) {
        e.preventDefault();

        if (this.props.onSelect) {
            this._isChanging = true;
            this.props.onSelect(key, e);
            this._isChanging = false;
        }

        if (this.state.activeKey === key) {
            key = null;
        }

        this.setState({
            activeKey: key
        });
    },
    render: function render() {
        var _props = this.props;
        var className = _props.className;
        var accordion = _props.accordion;
        var children = _props.children;

        var props = _objectWithoutProperties(_props, ['className', 'accordion', 'children']);

        var classes = (0, _classnames2.default)('panel-group', className);

        if (accordion) {
            props.role = 'tablist';
        }
        return _react2.default.createElement(
            'div',
            _extends({}, props, { className: classes, onSelect: null }),
            _react2.default.Children.map(children, this.renderPanel)
        );
    }
});

exports.default = PanelGroup;